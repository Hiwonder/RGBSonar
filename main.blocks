<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="KW@F#Q-B_%jn~C7SN`eM" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="N:}kERjfY%gr^9ms`}R1" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Sonar {" line1="    const Sonar_I2C_ADDR = 0x77;" line2="" line3="    const RGB_MODE = 2" line4="" line5="    const RGB1_R = 3" line6="    const RGB1_G = 4" line7="    const RGB1_B = 5" line8="    const RGB2_R = 6" line9="    const RGB2_G = 7" line10="    const RGB2_B = 8" line11="" line12="    const RGB1_R_BREATHING_CYCLE = 9" line13="    const RGB1_G_BREATHING_CYCLE = 10" line14="    const RGB1_B_BREATHING_CYCLE = 11" line15="    const RGB2_R_BREATHING_CYCLE = 12" line16="    const RGB2_G_BREATHING_CYCLE = 13" line17="    const RGB2_B_BREATHING_CYCLE = 14" line18="" line19="    export enum RGBMode {" line20="        //% block=&quot;0&quot;" line21="        rgb = 0," line22="        //% block=&quot;1&quot;" line23="        breathing = 1," line24="    }" line25="" line26="    export enum RGBNum {" line27="        //% block=&quot;0&quot;" line28="        left = 0," line29="        //% block=&quot;1&quot;" line30="        right = 1," line31="        //% block=&quot;2&quot;" line32="        all = 2," line33="    }" line34="" line35="    function II2Cread(reg: number): Buffer {" line36="        let val = pins.i2cReadBuffer(reg, 1);" line37="        return val;" line38="    }" line39="" line40="    function WireWriteByte(addr: number, val: number): boolean {" line41="        let buf = pins.createBuffer(1);" line42="        buf[0] = val;" line43="        let rvalue = pins.i2cWriteBuffer(addr, buf);" line44="        if (rvalue != 0) {" line45="            return false;" line46="        }" line47="        return true;" line48="    }&#9;" line49="" line50="" line51="    function WireWriteDataArray(addr: number, reg: number, val: number): boolean {" line52="        let buf2 = pins.createBuffer(3);" line53="        buf2[0] = reg;" line54="        buf2[1] = val &amp; 0xff;" line55="        buf2[2] = (val &gt;&gt; 8) &amp; 0xff;" line56="        let rvalue2 = pins.i2cWriteBuffer(addr, buf2);" line57="        if (rvalue2 != 0) {" line58="            return false;" line59="        }" line60="        return true;" line61="    }" line62="" line63="    function WireReadDataArray(addr: number, reg: number, len: number): number {" line64="        if (!WireWriteByte(addr, reg)) {" line65="            return -1;" line66="        }" line67="" line68="        let buf3 = II2Cread(addr);" line69="        if (buf3.length != 1) {" line70="            return 0;" line71="        }" line72="        return buf3[0];" line73="    }" line74="" line75="    //% weight=100 blockId=SETRGB block=&quot;Set Mode|%mode LED|%index RGB|%r|%g|%b&quot;" line76="    //% inlineInputMode=inline" line77="    export function SETRGB(mode: RGBMode, index: RGBNum, r: number, g: number, b: number) {" line78="         WireWriteDataArray(Sonar_I2C_ADDR, RGB_MODE, mode);" line79="        let start_reg = 3;  " line80="        " line81="        if (mode == RGBMode.breathing) {         " line82="            start_reg = 9;" line83="            r = r * 10;" line84="            g = g * 10;" line85="            b = b * 10;        " line86="        }" line87="        else {" line88="            if (r == 0 &amp;&amp; g == 0 &amp;&amp; b == 0) {" line89="                let buf4 = pins.createBuffer(7); " line90="                buf4[0] = 0x09;" line91="                buf4[1] = 0x00;" line92="                buf4[2] = 0x00;" line93="                buf4[3] = 0x00;" line94="                buf4[4] = 0x00;" line95="                buf4[5] = 0x00;" line96="                buf4[6] = 0x00;" line97="                pins.i2cWriteBuffer(Sonar_I2C_ADDR, buf4);" line98="            }" line99="        }" line100="        if (index != RGBNum.all) { " line101="            let buf5 = pins.createBuffer(4);" line102="            if (index == RGBNum.left &amp;&amp; mode == RGBMode.rgb) {" line103="                start_reg = 6;" line104="            } " line105="            else if (index == RGBNum.left &amp;&amp; mode == RGBMode.breathing) {" line106="                start_reg = 12;" line107="            }                     " line108="            buf5[0] = start_reg &amp; 0xff;" line109="            buf5[1] = r &amp; 0xff;" line110="            buf5[2] = g &amp; 0xff;" line111="            buf5[3] = b &amp; 0xff;" line112="            pins.i2cWriteBuffer(Sonar_I2C_ADDR, buf5);" line113="        }" line114="        else {" line115="            let buf6 = pins.createBuffer(7); " line116="            buf6[0] = start_reg &amp; 0xff;" line117="            buf6[1] = r &amp; 0xff;" line118="            buf6[2] = g &amp; 0xff;" line119="            buf6[3] = b &amp; 0xff;" line120="            buf6[4] = r &amp; 0xff;" line121="            buf6[5] = g &amp; 0xff;" line122="            buf6[6] = b &amp; 0xff;" line123="            pins.i2cWriteBuffer(Sonar_I2C_ADDR, buf6);" line124="        }      " line125="    }" line126="" line127="    //% weight=99 blockId=GETDISTANCE block=&quot;Get Distance&quot;" line128="    export function GETDISTANCE():number {" line129="        let distance = WireReadDataArray(Sonar_I2C_ADDR, 0, 2);" line130="        return distance;" line131="    }" line132="" line133="}" numlines="134"></mutation></block></statement></block></xml>